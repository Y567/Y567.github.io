<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>笔记归宿</title>
  
  <subtitle>愿你熬得过万丈孤独，藏得下星辰大海　</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yy.note/"/>
  <updated>2020-01-27T16:59:53.275Z</updated>
  <id>https://yy.note/</id>
  
  <author>
    <name>Yang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>选择排序</title>
    <link href="https://yy.note/%E6%8E%92%E5%BA%8F/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
    <id>https://yy.note/%E6%8E%92%E5%BA%8F/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</id>
    <published>2020-01-27T16:39:50.000Z</published>
    <updated>2020-01-27T16:59:53.275Z</updated>
    
    <content type="html"><![CDATA[<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li><p>1.1 排序</p></li><li><p>排序，就是使一串记录，按照其中的某个或某些关键字的大小，递增或递减的排列起来的操作。<br>平时的上下文中，如果提到排序，通常指的是排升序（非降序）。<br>通常意义上的排序，都是指的原地排序(in place sort)。*</p></li><li><p>1.2 稳定性</p></li><li><p>两个相等的数据，如果经过排序后，排序算法能保证其相对位置不发生变化，则我们称该算法是具备稳定性的排序<br>算法。*</p><p> <em>9  ,  5  ,  2  ,  7  ,  12  ,  2  ,  4  ,  6  ,  9  ,  23<br> 排序后<br> 前面的 2 依旧在后面的 2 的后面那么称这个算法具有稳定性</em></p></li></ul><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>选择排序实际上就是在遍历的同时选择出最小的元素放在前面，第一次选出最小的放在第一位，第二次选择出次小的放在第二位。。。后面按照相同的步骤就可以使数组有序。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//直接选择排序</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>&#123;</span><br><span class="line">    <span class="comment">//这里写成i &lt; array.length - 1;因为当你排完前面的序，最后一个就默认有序了，所以遍历到倒数第二个就结束了</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> minIndex = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>;j &lt; array.length - <span class="number">1</span>;j++)&#123;</span><br><span class="line">            <span class="comment">//小于号保证了稳定性</span></span><br><span class="line">            <span class="keyword">if</span>(array[j] &lt; array[minIndex])&#123;</span><br><span class="line">                minIndex = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(array,i,minIndex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> i, <span class="keyword">int</span> minIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = array[minIndex];</span><br><span class="line">    array[minIndex] = array[i];</span><br><span class="line">    array[i] = t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：<br>选择排序是稳定的，在比较条件不写等于号就可以避免破坏数据的相对位置！</p><p>优化：在遍历的同时记录最大最小值，将最小值放在前面，最大值放在最后，这样效率就会提升，遍历的次数就少了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectSort2</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>&#123;</span><br><span class="line">     <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">int</span> right = array.length - <span class="number">1</span>;</span><br><span class="line">     <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">         <span class="keyword">int</span> minIndex = left;</span><br><span class="line">         <span class="keyword">int</span> maxIndex = left;</span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> i = left + <span class="number">1</span>;i &lt;= right;i++)&#123;</span><br><span class="line">             <span class="keyword">if</span>(array[i] &lt; array[minIndex])&#123;</span><br><span class="line">                 minIndex = i;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">if</span>(array[i] &gt; array[maxIndex])&#123;</span><br><span class="line">                 maxIndex = i;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         swap(array,left,minIndex);</span><br><span class="line">         <span class="keyword">if</span>(maxIndex == left)&#123;</span><br><span class="line">             maxIndex = minIndex;</span><br><span class="line">         &#125;</span><br><span class="line">         swap(array,right,maxIndex);</span><br><span class="line">         left++;</span><br><span class="line">         right--;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>需要注意的地方：</strong><br>            if(maxIndex == left){<br>                maxIndex = minIndex;<br>            }<br>这里是为了防止最大的元素在最左边被交换掉位置！比如：</p><p><strong>9     5      1      7       3        2<br>left = 0;      right = 5;<br>maxIndex = 0; minIndex = 2;<br>如果不加这个条件，当将最小的交换到最左边后，其实maxIndex已经不为0了。而变成了2，所以只要将maxIndex = minIndex;就可以了</strong></p><p>注：如有运行错误，请评论一下我尽快更改，谢谢啦！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;排序&quot;&gt;&lt;a href=&quot;#排序&quot; class=&quot;headerlink&quot; title=&quot;排序&quot;&gt;&lt;/a&gt;排序&lt;/h1&gt;&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;ul&gt;
&lt;
      
    
    </summary>
    
    
      <category term="排序" scheme="https://yy.note/categories/%E6%8E%92%E5%BA%8F/"/>
    
    
      <category term="算法" scheme="https://yy.note/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>希尔排序</title>
    <link href="https://yy.note/%E6%8E%92%E5%BA%8F/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/"/>
    <id>https://yy.note/%E6%8E%92%E5%BA%8F/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/</id>
    <published>2020-01-27T16:39:40.000Z</published>
    <updated>2020-01-27T17:00:13.655Z</updated>
    
    <content type="html"><![CDATA[<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li><p>1.1 排序</p></li><li><p>排序，就是使一串记录，按照其中的某个或某些关键字的大小，递增或递减的排列起来的操作。<br>平时的上下文中，如果提到排序，通常指的是排升序（非降序）。<br>通常意义上的排序，都是指的原地排序(in place sort)。*</p></li><li><p>1.2 稳定性</p></li><li><p>两个相等的数据，如果经过排序后，排序算法能保证其相对位置不发生变化，则我们称该算法是具备稳定性的排序<br>算法。*</p><p> <em>9  ,  5  ,  2  ,  7  ,  12  ,  2  ,  4  ,  6  ,  9  ,  23<br> 排序后<br> 前面的 2 依旧在后面的 2 的后面那么称这个算法具有稳定性</em></p></li></ul><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p><a href="https://blog.csdn.net/qq_42419462/article/details/101382639" target="_blank" rel="noopener">想要了解希尔排序需要先了解直接插入排序（希尔排序是直接插入排序的优化）</a></p><p>  9  ,  5  ,  2  ,  7  ,  12  ,  2  ,  4  ,  6  ,  9  ,  23</p><p>基本思想是一样。<br>希尔排序你可以将其理解为分组进行插入排序。（跳着排序）<br>先将数组变为一个近似有序的数组。然后逐渐逼近。<br>这里利用一个变量（gap）实现分组。<br>gap代表间隙，一次移动的步数，因为移动的步数是跳着走的所以比起直接插入排序的一步一步走快！！！<br>继续下去数组最后就会有序</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分组交换的插入排序(gap表示间隙)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSortWithGap</span><span class="params">(<span class="keyword">int</span>[] array,<span class="keyword">int</span> gap)</span></span>&#123;</span><br><span class="line">    <span class="comment">//这里交换的思想与直接插入排序一样，只是跳着比较，不是一个个比较，排完后，数组近似有序</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; array.length;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> key = array[i];</span><br><span class="line">        <span class="keyword">int</span> j = i - gap;</span><br><span class="line">        <span class="comment">//同样的这里写大于是为了保证稳定性</span></span><br><span class="line">        <span class="keyword">for</span>(; j &gt;= <span class="number">0</span> &amp;&amp; array[j] &gt; key;j-=gap)&#123;</span><br><span class="line">            array[j+gap] = array[j];</span><br><span class="line">        &#125;</span><br><span class="line">        array[j+gap] = key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//希尔排序</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> gap = array.length;</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">        gap= (gap / <span class="number">3</span>) + <span class="number">1</span>;<span class="comment">//这里也可以写gap = gap / 2;  这是很多人总结出来分的间隔最适合的(也就是跳跃的步骤)</span></span><br><span class="line">        insertSortWithGap(array,gap);</span><br><span class="line">        <span class="comment">//如果gap==1说明排序方法以及按照一个个的比较排序过了，则说明数组已经处于有序了</span></span><br><span class="line">        <span class="comment">//所以直接跳出即可</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="number">1</span> == gap)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：<br>1.希尔排序是不稳定的，因为分组的时候，两个一样的数可能没有被分到一起，一个跳到另一个后面也是可能的！<br>2.gap的取值可以自己定义；但推荐两种：<br>（1）gap = gap / 2;<br>（2）gap = gap / 3 + 1;</p><p>注：如有运行错误，请评论一下我尽快更改，谢谢啦！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;排序&quot;&gt;&lt;a href=&quot;#排序&quot; class=&quot;headerlink&quot; title=&quot;排序&quot;&gt;&lt;/a&gt;排序&lt;/h1&gt;&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;ul&gt;
&lt;
      
    
    </summary>
    
    
      <category term="排序" scheme="https://yy.note/categories/%E6%8E%92%E5%BA%8F/"/>
    
    
      <category term="算法" scheme="https://yy.note/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>直接插入排序</title>
    <link href="https://yy.note/%E6%8E%92%E5%BA%8F/%E7%9B%B4%E6%8E%A5%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    <id>https://yy.note/%E6%8E%92%E5%BA%8F/%E7%9B%B4%E6%8E%A5%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</id>
    <published>2020-01-27T16:39:19.000Z</published>
    <updated>2020-01-27T16:59:16.335Z</updated>
    
    <content type="html"><![CDATA[<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li><p>1.1 排序</p></li><li><p>排序，就是使一串记录，按照其中的某个或某些关键字的大小，递增或递减的排列起来的操作。<br>平时的上下文中，如果提到排序，通常指的是排升序（非降序）。<br>通常意义上的排序，都是指的原地排序(in place sort)。*</p></li><li><p>1.2 稳定性</p></li><li><p>两个相等的数据，如果经过排序后，排序算法能保证其相对位置不发生变化，则我们称该算法是具备稳定性的排序<br>算法。*</p><p> <em>9  ,  5  ,  2  ,  7  ,  12  ,  2  ,  4  ,  6  ,  9  ,  23<br> 排序后<br> 前面的 2 依旧在后面的 2 的后面那么称这个算法具有稳定性</em></p></li></ul><h2 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h2><p>整个区间被分为</p><ol><li><p>有序区间</p></li><li><p>无序区间<br>每次选择无序区间的第一个元素，在有序区间内选择合适的位置插入，随着数组的遍历完成以及元素的插入，数组就有序起来</p><p>9  ,  5  ,  2  ,  7  ,  12  ,  2  ,  4  ,  6  ,  9  ,  23</p></li></ol><p>（1）利用key记住5<br>（2）从5开始，我们默认第一个元素有序，拿5和9比较，比9小，<br>9向后移动<br>（3）5继续比较发现没有元素，那么将5插入成第一个元素<br>（4）数组变为了 5，9， 2  ,  7  ,  12  ,  2  ,  4  ,  6  ,  9  ,  23<br>（5）现在认为有序区间有两个元素，所以在无序区间继续选择<br>（6）利用key记住2<br>（7）我们拿2和9比较，比9小，9向后移动<br>（8）数组变为了5，9，9，7，12，2，4，6，9，23<br>（9）在拿2和5比较，比5小，5向后移动<br>（10）数组变为了 5，5，9，7，12，2，4，6，9，23<br>（11）2没有要比的元素，将其插入<br>（12）数组变为了2，5，9，7，12，2，4，6，9，23<br>.。。。<br>继续下去数组最后就会有序</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//插入排序</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>&#123;</span><br><span class="line">    <span class="comment">//从1开始是因为我们默认第一个元素是有序的</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; array.length;i++)&#123;</span><br><span class="line">        <span class="comment">//这里用变量记住这个要进行插入的数据</span></span><br><span class="line">        <span class="keyword">int</span> key = array[i];</span><br><span class="line">        <span class="comment">//j表示有序区间的最后一个下标（从后往前比较）</span></span><br><span class="line">        <span class="keyword">int</span> j = i - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//如果有序区间的元素大那么有序区间向后移动，让key进行插入。（这就是为什么要用key记住插入的数据</span></span><br><span class="line">        <span class="comment">// 防止被移动的有序元素覆盖掉，大于号是为了保证稳定性）</span></span><br><span class="line">        <span class="keyword">for</span>(; j &gt;= <span class="number">0</span> &amp;&amp; array[j] &gt; key;j--)&#123;</span><br><span class="line">            array[j+<span class="number">1</span>] = array[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//j+1才是真正要插入的地方</span></span><br><span class="line">        array[j+<span class="number">1</span>] = key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：<br>直接插入排序是一种稳定的算法，因为它是按照原本数组的顺序一步步向后遍历的，插入的时候移动条件是大于才移动。<br>所以等于的时候数组没有进行改变，这就保证了数组的稳定性！<br>注：如有运行错误，请评论一下我尽快更改，谢谢啦！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;排序&quot;&gt;&lt;a href=&quot;#排序&quot; class=&quot;headerlink&quot; title=&quot;排序&quot;&gt;&lt;/a&gt;排序&lt;/h1&gt;&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;ul&gt;
&lt;
      
    
    </summary>
    
    
      <category term="排序" scheme="https://yy.note/categories/%E6%8E%92%E5%BA%8F/"/>
    
    
      <category term="算法" scheme="https://yy.note/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>堆排序</title>
    <link href="https://yy.note/%E6%8E%92%E5%BA%8F/%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
    <id>https://yy.note/%E6%8E%92%E5%BA%8F/%E5%A0%86%E6%8E%92%E5%BA%8F/</id>
    <published>2020-01-27T16:39:08.000Z</published>
    <updated>2020-01-27T17:00:19.075Z</updated>
    
    <content type="html"><![CDATA[<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li><p>1.1 排序</p></li><li><p>排序，就是使一串记录，按照其中的某个或某些关键字的大小，递增或递减的排列起来的操作。<br>平时的上下文中，如果提到排序，通常指的是排升序（非降序）。<br>通常意义上的排序，都是指的原地排序(in place sort)。*</p></li><li><p>1.2 稳定性</p></li><li><p>两个相等的数据，如果经过排序后，排序算法能保证其相对位置不发生变化，则我们称该算法是具备稳定性的排序<br>算法。*</p><p> <em>9  ,  5  ,  2  ,  7  ,  12  ,  2  ,  4  ,  6  ,  9  ,  23<br> 排序后<br> 前面的 2 依旧在后面的 2 的后面那么称这个算法具有稳定性</em></p></li></ul><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p>其基本思想其实就是选择排序，只是寻求最大值的方式不同。选择排序是通过遍历求最大值（最小值），而堆排序是通过大堆的特性寻求最大值的，效率更高效一些。<br>大堆的实质其实就是数组。<br>堆首元素就是0号下标对应的元素。所以只需要交换0号下标的元素到末尾即可。</p><p>注意的地方：交换完元素后，堆的特性可能就被破环了，所以当交换完成后一定要对改变后的堆进行调整（这里我才用的是向下调整）</p><p>所以我们的第一步就是建堆(建堆需要用到堆的调整方法见下文)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">creatBigHeap</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = (array.length-<span class="number">2</span>) / <span class="number">2</span>;i &gt;= <span class="number">0</span>;i--)&#123;</span><br><span class="line">        shiftDownBig(array,i,array.length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调整堆的方法（这是向下调整大堆）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//向下调整大堆</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shiftDownBig</span><span class="params">(<span class="keyword">int</span>[] array,<span class="keyword">int</span> i,<span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">      <span class="keyword">while</span>(<span class="number">2</span> * i + <span class="number">1</span> &lt; size)&#123;</span><br><span class="line">          <span class="comment">//这里默认为左孩子最大</span></span><br><span class="line">          <span class="keyword">int</span> max = <span class="number">2</span> * i + <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">if</span>(max + <span class="number">1</span> &lt; size &amp;&amp; array[max] &lt; array[max + <span class="number">1</span>])&#123;</span><br><span class="line">              max = max + <span class="number">1</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span>(array[i] &gt;= array[max])&#123;</span><br><span class="line">              <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          swap(array,i,max);</span><br><span class="line">          i = max;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>接下来就是进行交换元素实现堆排序了<br><strong>(注意这里读不懂可以将i代入0去读会更清晰)：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//堆排序</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>&#123;</span><br><span class="line">     <span class="comment">//建大堆</span></span><br><span class="line">     creatBigHeap(array);</span><br><span class="line">     <span class="comment">//将最大的元素放在数组后面（这里i控制的是循环次数不要多想，比如n个元素只需要9次调整就可有序；）</span></span><br><span class="line">     <span class="comment">//和选择排序有点类似</span></span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length - <span class="number">1</span>;i++)&#123;</span><br><span class="line">         <span class="comment">//因为大堆的首元素就是数组中的最大值，所以直接交换(永远和无序区间最后一个交换)</span></span><br><span class="line">         swap(array,<span class="number">0</span>,array.length-i-<span class="number">1</span>);</span><br><span class="line">         <span class="comment">//交换完毕后可能会破坏堆的完整性所以需要调整</span></span><br><span class="line">         shiftDownBig(array,<span class="number">0</span>,array.length-i-<span class="number">1</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>总结：<br>堆排序是不稳定的，在堆的调整过程中非常容易将元素的相对位置改变。<br><strong>注意：排升序建大堆，排降序建小堆（都是与最后的元素交换）<br>大堆将大的元素交换到最后最后形成的数组就是升序！<br>反之，小堆将小的元素交换到后面，最后形成的数组就是降序的！</strong></p><p>注：如有运行错误，请评论一下我尽快更改，谢谢啦！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;排序&quot;&gt;&lt;a href=&quot;#排序&quot; class=&quot;headerlink&quot; title=&quot;排序&quot;&gt;&lt;/a&gt;排序&lt;/h1&gt;&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;ul&gt;
&lt;
      
    
    </summary>
    
    
      <category term="排序" scheme="https://yy.note/categories/%E6%8E%92%E5%BA%8F/"/>
    
    
      <category term="算法" scheme="https://yy.note/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>快速排序</title>
    <link href="https://yy.note/%E6%8E%92%E5%BA%8F/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    <id>https://yy.note/%E6%8E%92%E5%BA%8F/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</id>
    <published>2020-01-27T16:39:02.000Z</published>
    <updated>2020-01-27T16:58:29.375Z</updated>
    
    <content type="html"><![CDATA[<p>时间：2019年04月16日（周二）下午15:47<br>今天，突然想写一下快速排序，以前做过排序的比较，但是忘记的差不多了。这次回忆一下，下面是我在百度百科找到的关于快速排序的定义：</p><p>快速排序（Quicksort）是对冒泡排序的一种改进。<br>快速排序由C. A. R. Hoare在1962年提出。它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。</p><p>看完这段话，思路很清晰，一句话就是把要排序的数据变成俩部分嘛，左边都比右边小，当然我觉得还是说成三部分比较好！因为要有一个中间变量判断，小于这个中间变量的在左边，大于的在右边，就这么简单！</p><p>思路：<br>那又有人问了，左边小右边大，那顺序还不一定排好，比如：<br>3  ，  2    ，1  ，  7   ，9 ，  8<br>数字7的左边都小于7，右边都大于7，顺序没有排好。所以接下来我们就要用到递归了，一次排序后，你再对3到7排一次序，一直到全部排好。左边排好后在对右边进行一样的操作就好了。</p><p>详细步骤：(数组a[N],这里N为6，存放的数字就是上面那六个数字)<br>1）设置两个变量i、j，排序开始的时候：i=0，j=N-1；<br>2）以第一个数组元素作为中间变量，赋值给key，即key=a[0]；<br>3）从j开始向前搜索，即由后开始向前搜索(j–)，找到第一个小于key的值a[j]，将a[j]和a[i]的值交换；<br>4）从i开始向后搜索，即由前开始向后搜索(i++)，找到第一个大于key的a[i]，将a[i]和a[j]的值交换；<br>5）重复第3、4步，直到i=j;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Quick</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = low;</span><br><span class="line"><span class="keyword">int</span> j = high;</span><br><span class="line"><span class="keyword">int</span> key = a[low];</span><br><span class="line"><span class="keyword">while</span>(i&lt;j) &#123;<span class="comment">//一趟快排，当i,j不等时，一直找下去，最后就达到key左边小于key,key右边大于key</span></span><br><span class="line"><span class="keyword">while</span>(i&lt;j&amp;&amp;a[j]&gt;key) </span><br><span class="line">j--;</span><br><span class="line"><span class="keyword">if</span>(i&lt;j) &#123;</span><br><span class="line">a[i] = a[j];</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(i&lt;j&amp;&amp;a[i]&lt;key)</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">if</span>(i&lt;j) &#123;</span><br><span class="line">a[j] = a[i];</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line">a[i] = key;<span class="comment">//最后将关键词赋值给坑</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(low &lt; i-<span class="number">1</span>)</span><br><span class="line">Quick(a,low,i-<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(high &gt; i+<span class="number">1</span>)</span><br><span class="line">Quick(a,i+<span class="number">1</span>,high);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里面最外层的while循环就是实现一次快排，找啊找啊找，一直到i==j<br>这里有一个不容易理解的地方：<br>就是交换值的时候，直接将一个值赋给另一个值了，完全覆盖了，给人感觉就会造成数据丢失，不过不要担心。我们来走一遍！</p><p><img data-src="https://img-blog.csdnimg.cn/201904161637106.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDE5NDYy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>所以完全不必担心数据的丢失！<br>下面我将我的测试代码献上，一起学习，如果有错的地方请提出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> zy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Quicksort</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Quick</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = low;</span><br><span class="line"><span class="keyword">int</span> j = high;</span><br><span class="line"><span class="keyword">int</span> key = a[low];</span><br><span class="line"><span class="keyword">while</span>(i&lt;j) &#123;<span class="comment">//一趟快排，当i,j不等时，一直找下去，最后就达到key左边小于key,key右边大于key</span></span><br><span class="line"><span class="keyword">while</span>(i&lt;j&amp;&amp;a[j]&gt;key) </span><br><span class="line">j--;</span><br><span class="line"><span class="keyword">if</span>(i&lt;j) &#123;</span><br><span class="line">a[i] = a[j];</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(i&lt;j&amp;&amp;a[i]&lt;key)</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">if</span>(i&lt;j) &#123;</span><br><span class="line">a[j] = a[i];</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line">a[i] = key;<span class="comment">//最后将关键词赋值给坑</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(low &lt; i-<span class="number">1</span>)</span><br><span class="line">Quick(a,low,i-<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(high &gt; i+<span class="number">1</span>)</span><br><span class="line">Quick(a,i+<span class="number">1</span>,high);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">        <span class="keyword">int</span>[] a = &#123;<span class="number">25</span>,<span class="number">24</span>,<span class="number">12</span>,<span class="number">76</span>,<span class="number">101</span>,<span class="number">96</span>,<span class="number">28</span>&#125;;</span><br><span class="line">        Quick(a,<span class="number">0</span>,a.length-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i:a)</span><br><span class="line">        System.out.print(i+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;时间：2019年04月16日（周二）下午15:47&lt;br&gt;今天，突然想写一下快速排序，以前做过排序的比较，但是忘记的差不多了。这次回忆一下，下面是我在百度百科找到的关于快速排序的定义：&lt;/p&gt;
&lt;p&gt;快速排序（Quicksort）是对冒泡排序的一种改进。&lt;br&gt;快速排序由C
      
    
    </summary>
    
    
      <category term="排序" scheme="https://yy.note/categories/%E6%8E%92%E5%BA%8F/"/>
    
    
      <category term="算法" scheme="https://yy.note/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>优先级队列（堆）</title>
    <link href="https://yy.note/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97%EF%BC%88%E5%A0%86%EF%BC%89/"/>
    <id>https://yy.note/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97%EF%BC%88%E5%A0%86%EF%BC%89/</id>
    <published>2020-01-26T15:58:24.000Z</published>
    <updated>2020-01-26T16:03:56.194Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实现一个优先级队列"><a href="#实现一个优先级队列" class="headerlink" title="实现一个优先级队列"></a>实现一个优先级队列</h2><p>内部方法：<br>（1）建大（小）堆<br>（2）调整堆<br>（3）入队列<br>（4）出队列<br>实现的是一个大堆的优先级队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test_9_22;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPriorityQueue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] array;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyPriorityQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        array = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">16</span>];</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//交换</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] array,<span class="keyword">int</span> index1,<span class="keyword">int</span> index2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> t = array[index1];</span><br><span class="line">        array[index1] = array[index2];</span><br><span class="line">        array[index2] = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//向下调整小堆</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shiftDownSmall</span><span class="params">(<span class="keyword">int</span>[] array,<span class="keyword">int</span> i,<span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">2</span> * i + <span class="number">1</span> &lt; size)&#123;</span><br><span class="line">            <span class="comment">//i写成1</span></span><br><span class="line">            <span class="keyword">int</span> min = <span class="number">2</span> * i +<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(min + <span class="number">1</span> &lt; size &amp;&amp; array[min] &gt; array[min+<span class="number">1</span>])&#123;</span><br><span class="line">                min = min+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(array[i] &lt;= array[min])&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            swap(array, i, min);</span><br><span class="line">            i = min;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//向下调整大堆</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shiftDownBig</span><span class="params">(<span class="keyword">int</span>[] array,<span class="keyword">int</span> i,<span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">2</span> * i +<span class="number">1</span> &lt; size)&#123;</span><br><span class="line">            <span class="keyword">int</span> max = <span class="number">2</span> * i +<span class="number">1</span>;</span><br><span class="line">            <span class="comment">//比两个都大，那就比两个孩子中最大的大</span></span><br><span class="line">            <span class="keyword">if</span>(max + <span class="number">1</span> &lt; size &amp;&amp; array[max] &lt; array[max+<span class="number">1</span>])&#123;</span><br><span class="line">                max = max+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(array[i] &gt;= array[max])&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            swap(array,i,max);</span><br><span class="line">            i = max;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//建小堆</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createSmallHeap</span><span class="params">(<span class="keyword">int</span>[] array,<span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = (size-<span class="number">2</span>)/<span class="number">2</span>;i &gt;= <span class="number">0</span>;i--)&#123;</span><br><span class="line">            shiftDownSmall(array,i,size);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向上调整</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shiftUpSmall</span><span class="params">(<span class="keyword">int</span>[] array,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(i != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> parent = (i - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(array[parent] &gt; array[i])&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            swap(array,i,parent);</span><br><span class="line">            i = parent;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//建大堆</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">creatBigHeap</span><span class="params">(<span class="keyword">int</span>[] array,<span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = (size-<span class="number">2</span>)/<span class="number">2</span>;i &gt;= <span class="number">0</span>;i--)&#123;</span><br><span class="line">            shiftDownBig(array,i,size);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//入队列</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">offer</span><span class="params">(<span class="keyword">int</span> element)</span></span>&#123;</span><br><span class="line">        array[size++] = element;</span><br><span class="line">        shiftUpSmall(array,size-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//出队列</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">poll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> element = array[<span class="number">0</span>];</span><br><span class="line">        array[<span class="number">0</span>] = array[--size];</span><br><span class="line">        shiftDownSmall(array,size,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyPriorityQueue myPriorityQueue = <span class="keyword">new</span> MyPriorityQueue();</span><br><span class="line">        myPriorityQueue.offer(<span class="number">7</span>);</span><br><span class="line">        myPriorityQueue.offer(<span class="number">9</span>);</span><br><span class="line">        myPriorityQueue.offer(<span class="number">5</span>);</span><br><span class="line">        System.out.println(myPriorityQueue.poll());</span><br><span class="line">        myPriorityQueue.offer(<span class="number">3</span>);</span><br><span class="line">        myPriorityQueue.offer(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        //java中的优先级队列(PriorityQueue默认是小堆，compareTo返回小的排前面)</span></span><br><span class="line"><span class="comment">//        PriorityQueue&lt;Integer&gt; priorityQueue = new PriorityQueue&lt;&gt;();</span></span><br><span class="line"><span class="comment">//        priorityQueue.add(7);</span></span><br><span class="line"><span class="comment">//        priorityQueue.add(9);</span></span><br><span class="line"><span class="comment">//        priorityQueue.add(5);</span></span><br><span class="line"><span class="comment">//        System.out.println(priorityQueue.poll());</span></span><br><span class="line"><span class="comment">//        System.out.println(priorityQueue.poll());</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有错误还望指出哈</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;实现一个优先级队列&quot;&gt;&lt;a href=&quot;#实现一个优先级队列&quot; class=&quot;headerlink&quot; title=&quot;实现一个优先级队列&quot;&gt;&lt;/a&gt;实现一个优先级队列&lt;/h2&gt;&lt;p&gt;内部方法：&lt;br&gt;（1）建大（小）堆&lt;br&gt;（2）调整堆&lt;br&gt;（3）入队列&lt;br&gt;
      
    
    </summary>
    
    
      <category term="数据结构" scheme="https://yy.note/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="代码实现" scheme="https://yy.note/tags/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>实现简单的栈</title>
    <link href="https://yy.note/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E6%A0%88/"/>
    <id>https://yy.note/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E6%A0%88/</id>
    <published>2020-01-26T15:58:12.000Z</published>
    <updated>2020-01-26T16:03:16.086Z</updated>
    
    <content type="html"><![CDATA[<h2 id="利用LinkedList实现一个简单的栈"><a href="#利用LinkedList实现一个简单的栈" class="headerlink" title="利用LinkedList实现一个简单的栈"></a>利用LinkedList实现一个简单的栈</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyStack</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Queue&lt;Integer&gt; que = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Push element x onto stack. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        que.add(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Removes the element on top of the stack and returns that element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;  <span class="comment">//出栈顶元素</span></span><br><span class="line">    <span class="comment">//将链表里的前n-1个元素转移到后方（移除再加就变到了后面）</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; que.size()-<span class="number">2</span>;i++)&#123;</span><br><span class="line">            que.add(que.remove());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> que.remove();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Get the top element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;   <span class="comment">//这里和pop的区别就是保存栈顶元素</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; que.size()-<span class="number">2</span>;i++)&#123;</span><br><span class="line">            que.add(que.remove());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> result = que.remove();</span><br><span class="line">        que.add(result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns whether the stack is empty. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(que.size() &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;利用LinkedList实现一个简单的栈&quot;&gt;&lt;a href=&quot;#利用LinkedList实现一个简单的栈&quot; class=&quot;headerlink&quot; title=&quot;利用LinkedList实现一个简单的栈&quot;&gt;&lt;/a&gt;利用LinkedList实现一个简单的栈&lt;/h2&gt;&lt;
      
    
    </summary>
    
    
      <category term="数据结构" scheme="https://yy.note/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="代码实现" scheme="https://yy.note/tags/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>两个栈实现队列</title>
    <link href="https://yy.note/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/"/>
    <id>https://yy.note/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</id>
    <published>2020-01-26T15:58:03.000Z</published>
    <updated>2020-01-26T16:02:34.679Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实现一个队列"><a href="#实现一个队列" class="headerlink" title="实现一个队列"></a>实现一个队列</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    Stack&lt;Integer&gt; stack1 = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">    Stack&lt;Integer&gt; stack2 = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> node)</span> </span>&#123;</span><br><span class="line">        stack1.push(node);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(stack1.isEmpty()&amp;&amp;stack2.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;  <span class="comment">//表示没有元素可以出队列</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(stack2.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">while</span>(!stack1.isEmpty())&#123;</span><br><span class="line">                stack2.push(stack1.pop());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack2.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;实现一个队列&quot;&gt;&lt;a href=&quot;#实现一个队列&quot; class=&quot;headerlink&quot; title=&quot;实现一个队列&quot;&gt;&lt;/a&gt;实现一个队列&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt
      
    
    </summary>
    
    
      <category term="数据结构" scheme="https://yy.note/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="代码实现" scheme="https://yy.note/tags/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的建立，遍历</title>
    <link href="https://yy.note/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%BB%BA%E7%AB%8B%EF%BC%8C%E9%81%8D%E5%8E%86/"/>
    <id>https://yy.note/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%BB%BA%E7%AB%8B%EF%BC%8C%E9%81%8D%E5%8E%86/</id>
    <published>2020-01-26T15:57:33.000Z</published>
    <updated>2020-01-26T16:01:33.103Z</updated>
    
    <content type="html"><![CDATA[<h2 id="建立二叉树的两种方式"><a href="#建立二叉树的两种方式" class="headerlink" title="建立二叉树的两种方式"></a>建立二叉树的两种方式</h2><h3 id="（1）根据前序遍历数组和后序遍历数组建立"><a href="#（1）根据前序遍历数组和后序遍历数组建立" class="headerlink" title="（1）根据前序遍历数组和后序遍历数组建立"></a>（1）根据前序遍历数组和后序遍历数组建立</h3><h3 id="（2）根据中序遍历数组和后序遍历数组建立"><a href="#（2）根据中序遍历数组和后序遍历数组建立" class="headerlink" title="（2）根据中序遍历数组和后序遍历数组建立"></a>（2）根据中序遍历数组和后序遍历数组建立</h3><h2 id="遍历这里实现了后序遍历和层序遍历，中序和前序只是list-add的位置发生了改变（这里是递归实现）"><a href="#遍历这里实现了后序遍历和层序遍历，中序和前序只是list-add的位置发生了改变（这里是递归实现）" class="headerlink" title="遍历这里实现了后序遍历和层序遍历，中序和前序只是list.add的位置发生了改变（这里是递归实现）"></a>遍历这里实现了后序遍历和层序遍历，中序和前序只是list.add的位置发生了改变（这里是递归实现）</h2><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="这里list集合存储了遍历的集合元素"><a href="#这里list集合存储了遍历的集合元素" class="headerlink" title="这里list集合存储了遍历的集合元素"></a>这里list集合存储了遍历的集合元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    Node left;</span><br><span class="line">    Node right;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"%c "</span>,<span class="keyword">this</span>.val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按照前序遍历数组和中序遍历数组构建二叉树</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">buildTree1</span><span class="params">(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preorder.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> rootValues = preorder[<span class="number">0</span>];</span><br><span class="line">        Node root = <span class="keyword">new</span> Node(rootValues);</span><br><span class="line">        <span class="keyword">int</span> leftCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(leftCount = <span class="number">0</span>;leftCount &lt; inorder.length;leftCount++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(inorder[leftCount] == rootValues)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] leftPreorder = Arrays.copyOfRange(preorder,<span class="number">1</span>,leftCount+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span>[] leftInorder = Arrays.copyOfRange(inorder,<span class="number">0</span>,leftCount);</span><br><span class="line">        root.left = buildTree(leftPreorder,leftInorder);</span><br><span class="line">        <span class="keyword">int</span>[] rightPreorder = Arrays.copyOfRange(preorder,leftCount+<span class="number">1</span>,preorder.length);</span><br><span class="line">        <span class="keyword">int</span>[] rightInorder = Arrays.copyOfRange(inorder,leftCount+<span class="number">1</span>,inorder.length);</span><br><span class="line">        root.right = buildTree1(rightPreorder,rightInorder);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据中序遍历和后序遍历创建二叉树</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] inorder, <span class="keyword">int</span>[] postorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(inorder.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> rootValues = postorder[postorder.length-<span class="number">1</span>];</span><br><span class="line">        Node root = <span class="keyword">new</span> Node(rootValues);</span><br><span class="line">        <span class="keyword">int</span> leftCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(leftCount = <span class="number">0</span>;leftCount &lt; inorder.length;leftCount++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(inorder[leftCount] == rootValues)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//统计出了左子树的节点数后求出左子树中序遍历的数组</span></span><br><span class="line">        <span class="keyword">int</span>[] leftInorder = Arrays.copyOfRange(inorder,<span class="number">0</span>,leftCount);</span><br><span class="line">        <span class="keyword">int</span>[] leftPostorder = Arrays.copyOfRange(postorder,<span class="number">0</span>,leftCount);</span><br><span class="line">        root.left = buildTree(leftInorder,leftPostorder);</span><br><span class="line">        <span class="comment">//建右子树</span></span><br><span class="line">        <span class="keyword">int</span>[] rightInorder = Arrays.copyOfRange(inorder,leftCount+<span class="number">1</span>,inorder.length);</span><br><span class="line">        <span class="keyword">int</span>[] rightPostorder = Arrays.copyOfRange(postorder,leftCount,inorder.length-<span class="number">1</span>);</span><br><span class="line">        root.right = buildTree(rightInorder,rightPostorder);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    题目：</span></span><br><span class="line"><span class="comment">    给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</span></span><br><span class="line"><span class="comment">百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”</span></span><br><span class="line"><span class="comment">例如，给定如下二叉树:  root = [3,5,1,6,2,0,8,null,null,7,4]</span></span><br><span class="line"><span class="comment">来源：力扣（LeetCode）</span></span><br><span class="line"><span class="comment">链接：https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree</span></span><br><span class="line"><span class="comment">著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(Node root,Node t)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root == t)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(search(root.left,t))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> search(root.right,t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">lowestCommonAncestor</span><span class="params">(Node root, Node p, Node q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(p == root || q == root)&#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">boolean</span> pInleft = search(root.left,p);</span><br><span class="line">        <span class="keyword">boolean</span> qInleft = search(root.left,q);</span><br><span class="line">        <span class="keyword">if</span>(pInleft &amp;&amp; qInleft)&#123;</span><br><span class="line">            <span class="keyword">return</span> lowestCommonAncestor(root.left,p,q);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!pInleft &amp;&amp; !qInleft)&#123;</span><br><span class="line">            <span class="keyword">return</span> lowestCommonAncestor(root.right,p,q);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">//后序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title">postOrderTraversal</span><span class="params">(Node root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        postOrderTraversal(root.left);</span><br><span class="line">        postOrderTraversal(root.right);</span><br><span class="line">        list.add(root.val);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//二叉树的层序遍历（广度优先遍历） 利用队列实现</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">levelOrder</span><span class="params">(Node root)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(root != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Queue&lt;Node&gt; que = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">            que.offer(root);</span><br><span class="line">            <span class="keyword">while</span>(!que.isEmpty())&#123;</span><br><span class="line">                Node front = que.poll();</span><br><span class="line">                System.out.println(front.val);</span><br><span class="line">                <span class="keyword">if</span>(front.left != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    que.offer(front.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(front.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    que.offer(front.right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">//汇总思想</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title">postOrderTraversal2</span><span class="params">(Node root)</span></span>&#123;</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Integer&gt; left = postOrderTraversal2(root.left);</span><br><span class="line">        List&lt;Integer&gt; right = postOrderTraversal2(root.right);</span><br><span class="line">        result.addAll(left);</span><br><span class="line">        result.addAll(right);</span><br><span class="line">        result.add(root.val);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//相等</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSameTree</span><span class="params">(Node s,Node t)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s == <span class="keyword">null</span> &amp;&amp; t == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s == <span class="keyword">null</span> || t == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s.val == t.val &amp;&amp; isSameTree(s.left,t.left) &amp;&amp; isSameTree(s.right,t.right))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//t是否是s的子树(s,t一定不为空树)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSubTree</span><span class="params">(Node s,Node t)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isSameTree(s.left,t) || isSameTree(s.right,t) || isSameTree(s,t))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;建立二叉树的两种方式&quot;&gt;&lt;a href=&quot;#建立二叉树的两种方式&quot; class=&quot;headerlink&quot; title=&quot;建立二叉树的两种方式&quot;&gt;&lt;/a&gt;建立二叉树的两种方式&lt;/h2&gt;&lt;h3 id=&quot;（1）根据前序遍历数组和后序遍历数组建立&quot;&gt;&lt;a href=&quot;#（
      
    
    </summary>
    
    
      <category term="数据结构" scheme="https://yy.note/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="代码实现" scheme="https://yy.note/tags/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的镜像</title>
    <link href="https://yy.note/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%95%9C%E5%83%8F/"/>
    <id>https://yy.note/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%95%9C%E5%83%8F/</id>
    <published>2020-01-25T13:22:25.000Z</published>
    <updated>2020-01-25T13:24:26.854Z</updated>
    
    <content type="html"><![CDATA[<h2 id="【牛客】求出二叉树的镜像"><a href="#【牛客】求出二叉树的镜像" class="headerlink" title="【牛客】求出二叉树的镜像"></a>【牛客】求出二叉树的镜像</h2><p>链接：<br><a href="https://www.nowcoder.com/questionTerminal/564f4c26aa584921bc75623e48ca3011" target="_blank" rel="noopener">原题出处</a><br>来源：牛客网</p><p>其实我是看了大佬的博客：<br><a href="https://blog.csdn.net/xiaoxingxing1744/article/details/82782461" target="_blank" rel="noopener">大佬解说</a></p><p>操作给定的二叉树，将其变换为源二叉树的镜像。</p><p><img data-src="https://img-blog.csdnimg.cn/20191125162229432.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDE5NDYy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>有两种实现方式：<br>递归：</p><p>想象一下，加入只有三个结点，根结点，左孩子，右孩子<br>那么就交换左右孩子。</p><p>出口条件：</p><blockquote><p>节点为空或者左右孩子都为空</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//递归</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Mirror</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//这里和非递归的条件很类似，都是说了一件事，只要有一个不为空，我就要交换（空和非空也有左右对称嘛）</span></span><br><span class="line">    <span class="keyword">if</span>(root.left==<span class="keyword">null</span>&amp;&amp;root.right==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//交换</span></span><br><span class="line">    TreeNode temp = root.left;</span><br><span class="line">    root.left = root.right;</span><br><span class="line">    root.right = temp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//递归左子树</span></span><br><span class="line">    <span class="keyword">if</span>(root.left!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        Mirror(root.left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//递归右子树</span></span><br><span class="line">    <span class="keyword">if</span>(root.right!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        Mirror(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非递归：<br>递归其实就是栈的入栈出栈，我们可以利用栈的特性对结点进行操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//非递归</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Mirror</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    stack.push(root);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">        TreeNode node = stack.pop();</span><br><span class="line">        <span class="comment">//这个条件映衬了上面所说的话</span></span><br><span class="line">        <span class="keyword">if</span>(node.left!=<span class="keyword">null</span>||node.right!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            TreeNode temp = node.left;</span><br><span class="line">            node.left = node.right;</span><br><span class="line">            node.right = temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//其实递归就是栈的入栈出栈，所以代码很相似</span></span><br><span class="line">        <span class="keyword">if</span>(node.left!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            stack.push(node.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node.right!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            stack.push(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;【牛客】求出二叉树的镜像&quot;&gt;&lt;a href=&quot;#【牛客】求出二叉树的镜像&quot; class=&quot;headerlink&quot; title=&quot;【牛客】求出二叉树的镜像&quot;&gt;&lt;/a&gt;【牛客】求出二叉树的镜像&lt;/h2&gt;&lt;p&gt;链接：&lt;br&gt;&lt;a href=&quot;https://www.no
      
    
    </summary>
    
    
      <category term="牛客网练习" scheme="https://yy.note/categories/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="算法" scheme="https://yy.note/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>二叉树平衡检查</title>
    <link href="https://yy.note/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B9%B3%E8%A1%A1%E6%A3%80%E6%9F%A5/"/>
    <id>https://yy.note/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B9%B3%E8%A1%A1%E6%A3%80%E6%9F%A5/</id>
    <published>2020-01-25T13:17:16.000Z</published>
    <updated>2020-01-25T13:21:53.854Z</updated>
    
    <content type="html"><![CDATA[<p>参考：<a href="https://blog.csdn.net/canmengmeng/article/details/83506289" target="_blank" rel="noopener">学习自该大佬</a></p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>实现一个函数，检查二叉树是否平衡，平衡的定义如下，对于树中的任意一个结点，其两颗子树的高度差不超过1。</p><p>给定指向树根结点的指针TreeNode* root，请返回一个bool，代表这棵树是否平衡。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>1.求出左子树与右子树的高度差，大于1则false<br>2.如何求？<br>递归求出，如果节点为空那么则深度为0，这同时也是递归出口，若不为空则递归左子树与右子树。<br>注意：最终二叉树的高度是左右子树取高度高的加1</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public class TreeNode &#123;</span></span><br><span class="line"><span class="comment">    int val = 0;</span></span><br><span class="line"><span class="comment">    TreeNode left = null;</span></span><br><span class="line"><span class="comment">    TreeNode right = null;</span></span><br><span class="line"><span class="comment">    public TreeNode(int val) &#123;</span></span><br><span class="line"><span class="comment">        this.val = val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Balance</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBalance</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> left = getTreeHeight(root.left);</span><br><span class="line">        <span class="keyword">int</span> right = getTreeHeight(root.right);</span><br><span class="line">        <span class="keyword">return</span> Math.abs(left - right) &lt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getTreeHeight</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//这里为什么加1?，因为root为null时返回的是0，我们假设只有三个节点的完全二叉树</span></span><br><span class="line">        <span class="comment">//那是不是最后的结果就是根节点的左孩子0+0+1，根节点的右孩子0+0+1,最后1和1取大的再加1，不就是2嘛</span></span><br><span class="line">        <span class="keyword">return</span> Math.max(getTreeHeight(root.left),getTreeHeight(root.right))+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考：&lt;a href=&quot;https://blog.csdn.net/canmengmeng/article/details/83506289&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;学习自该大佬&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目&quot;&gt;&lt;a href
      
    
    </summary>
    
    
      <category term="牛客网练习" scheme="https://yy.note/categories/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="算法" scheme="https://yy.note/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>链表分割</title>
    <link href="https://yy.note/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0/%E9%93%BE%E8%A1%A8%E5%88%86%E5%89%B2/"/>
    <id>https://yy.note/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0/%E9%93%BE%E8%A1%A8%E5%88%86%E5%89%B2/</id>
    <published>2020-01-25T13:17:04.000Z</published>
    <updated>2020-01-25T13:27:35.094Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<br><a href="https://www.nowcoder.com/questionTerminal/0e27e0b064de4eacac178676ef9c9d70?mutiTagIds=639&orderByHotValue=1&questionTypes=000100&commentTags=Python" target="_blank" rel="noopener">原题出处</a><br>来源：牛客网</p><p>[编程题] 链表分割<br>热度指数：43019时间限制：3秒空间限制：32768K<br>算法知识视频讲解</p><p>编写代码，以给定值x为基准将链表分割成两部分，所有小于x的结点排在大于或等于x的结点之前</p><p>给定一个链表的头指针 ListNode* pHead，请返回重新排列后的链表的头指针。注意：分割以后保持原来的数据顺序不变。</p><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>一看到这道题我就想到了创建两个链表的想法，一个链表放小于指定x的所有节点，另一个放大于等于的，最后将两个链表合二为一不就是要求的结果吗</p><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p>（1）记住两个链表的头节点，在拼接时需要用到<br>（2）考虑空异常</p><p><strong><em>未实现的思路：</em></strong><br>既然可以这样弄两个链表，那么为什么不这样（创建一个链表就可以）呢？</p><p>将小于x的节点头插到该链表，大于等于的尾插到该链表，最后形成的链表不就是答案吗。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>我实现的是两个链表的（可以优化的地方：将尾插算法抽取出来为一个方法）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">partition</span><span class="params">(ListNode pHead, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">     <span class="comment">// write code here</span></span><br><span class="line">     ListNode left = <span class="keyword">null</span>;</span><br><span class="line">     ListNode right = <span class="keyword">null</span>;</span><br><span class="line">     ListNode p1 = <span class="keyword">null</span>;</span><br><span class="line">     ListNode p2 = <span class="keyword">null</span>;</span><br><span class="line">     <span class="keyword">while</span>(pHead!=<span class="keyword">null</span>)&#123;</span><br><span class="line">         <span class="keyword">if</span>(pHead.val&lt;x)&#123;</span><br><span class="line">             <span class="keyword">if</span>(left == <span class="keyword">null</span>)&#123;</span><br><span class="line">                 left = <span class="keyword">new</span> ListNode(pHead.val);</span><br><span class="line">                 p1 = left; <span class="comment">//左链表的头节点</span></span><br><span class="line">             &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                 left.next = <span class="keyword">new</span> ListNode(pHead.val);</span><br><span class="line">                 left = left.next;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">             <span class="keyword">if</span>(right == <span class="keyword">null</span>)&#123;</span><br><span class="line">                 right = <span class="keyword">new</span> ListNode(pHead.val);</span><br><span class="line">                 p2 = right;    <span class="comment">//右链表的头节点</span></span><br><span class="line">             &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                 right.next = <span class="keyword">new</span> ListNode(pHead.val);</span><br><span class="line">                 right = right.next;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         pHead = pHead.next;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span>(p1==<span class="keyword">null</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> p2;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>(p2==<span class="keyword">null</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> p1;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//走到这里说明都不为空，需要连接</span></span><br><span class="line">     <span class="comment">//找到左链表的最后一个节点将其与右链表连接</span></span><br><span class="line">     ListNode cur = p1;</span><br><span class="line">     <span class="keyword">while</span>(cur.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">         cur = cur.next;</span><br><span class="line">     &#125;</span><br><span class="line">     cur.next = p2;</span><br><span class="line">     <span class="keyword">return</span> p1;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>如果有错误还望指出！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;链接：&lt;br&gt;&lt;a href=&quot;https://www.nowcoder.com/questionTerminal/0e27e0b064de4eacac178676ef9c9d70?mutiTagIds=639&amp;orderByHotValue=1&amp;questionTypes
      
    
    </summary>
    
    
      <category term="牛客网练习" scheme="https://yy.note/categories/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="算法" scheme="https://yy.note/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>统计同成绩人数</title>
    <link href="https://yy.note/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0/%E7%BB%9F%E8%AE%A1%E5%90%8C%E6%88%90%E7%BB%A9%E4%BA%BA%E6%95%B0/"/>
    <id>https://yy.note/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0/%E7%BB%9F%E8%AE%A1%E5%90%8C%E6%88%90%E7%BB%A9%E4%BA%BA%E6%95%B0/</id>
    <published>2020-01-25T13:15:21.000Z</published>
    <updated>2020-01-25T13:31:07.374Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<br><a href="https://www.nowcoder.com/questionTerminal/987123efea5f43709f31ad79a318ca69" target="_blank" rel="noopener">原题出处</a><br>来源：牛客网</p><p>读入N名学生的成绩，将获得某一给定分数的学生人数输出。</p><p>输入描述:<br>测试输入包含若干测试用例，每个测试用例的格式为</p><blockquote><p>第1行：N<br>第2行：N名学生的成绩，相邻两数字用一个空格间隔。<br>第3行：给定分数</p></blockquote><p>当读到N=0时输入结束。其中N不超过1000，成绩分数为（包含）0到100之间的一个整数。</p><p>输出描述:<br>对每个测试用例，将获得给定分数的学生人数输出。<br>示例1<br>输入</p><blockquote><p>3<br>80 60 90<br>60<br>2<br>85 66<br>0<br>5<br>60 75 90 55 75<br>75<br>0</p></blockquote><p>输出</p><blockquote><p>1<br>0<br>2</p></blockquote><p>一开始，我写了一个封装类来封装信息，并将该类添加到集合中。这样才可以保证输出0结束后记住输入的所有数据。<br>在idea上复制输入示例代码测试，输出的数据与输出示例一样但是通不过测试，后来查了一下网络上的，他们是按一组一组数据处理的不是将所有数据输入后在统一处理，但是这样将输入示例在idea上测试与输出示例不符但又可以通过。百思不得其解，无情！<br>这里先附上可以通过的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> N=in.nextInt();</span><br><span class="line">        <span class="keyword">if</span>(N==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        in.nextLine();  <span class="comment">//吃个空格,nextLine()和next()以及nextInt()一起用一定要格外注意空格回车</span></span><br><span class="line">        String scores = in.nextLine();</span><br><span class="line">        <span class="keyword">int</span> score = in.nextInt();</span><br><span class="line"></span><br><span class="line">        String[] s=scores.split(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">for</span>(String t:s)&#123;</span><br><span class="line">            <span class="keyword">int</span> i = Integer.parseInt(t);</span><br><span class="line">            <span class="keyword">if</span>(i==score)&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面的是封装的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Day16</span></span>&#123;</span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> N,String scores,<span class="keyword">int</span> theScore)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        String[] s = scores.split(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> score = Integer.parseInt(s[i]);</span><br><span class="line">            <span class="keyword">if</span>(theScore==score)&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N;</span><br><span class="line">        String scores;</span><br><span class="line">        <span class="keyword">int</span> theScore;</span><br><span class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">(<span class="keyword">int</span> N,String scores,<span class="keyword">int</span> theScore)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.N=N;</span><br><span class="line">            <span class="keyword">this</span>.scores = scores;</span><br><span class="line">            <span class="keyword">this</span>.theScore = theScore;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCount</span><span class="params">(<span class="keyword">int</span> count)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.count = count;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        List&lt;Test&gt; list = <span class="keyword">new</span> ArrayList&lt;Test&gt;();</span><br><span class="line">        <span class="keyword">int</span> N=in.nextInt();</span><br><span class="line">        in.nextLine();  <span class="comment">//吃空格</span></span><br><span class="line">        <span class="keyword">while</span>(N!=<span class="number">0</span>)&#123;</span><br><span class="line">            String scores=in.nextLine();<span class="comment">/*</span></span><br><span class="line"><span class="comment">            System.out.println(scores);*/</span></span><br><span class="line">            <span class="keyword">int</span> theScore = in.nextInt();</span><br><span class="line">            list.add(<span class="keyword">new</span> Test(N,scores,theScore));</span><br><span class="line">            N = in.nextInt();</span><br><span class="line">            in.nextLine();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; list.size();i++)&#123;</span><br><span class="line">            Test test = list.get(i);</span><br><span class="line">            <span class="keyword">int</span> count = fun(test.N,test.scores,test.theScore);</span><br><span class="line">            test.setCount(count);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;list.size();i++)&#123;</span><br><span class="line">            System.out.println(list.get(i).count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如有错误还望指出哈！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;链接：&lt;br&gt;&lt;a href=&quot;https://www.nowcoder.com/questionTerminal/987123efea5f43709f31ad79a318ca69&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原题出处&lt;/a&gt;&lt;br&gt;来源
      
    
    </summary>
    
    
      <category term="牛客网练习" scheme="https://yy.note/categories/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="算法" scheme="https://yy.note/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>尼科彻斯定理</title>
    <link href="https://yy.note/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0/%E5%B0%BC%E7%A7%91%E5%BD%BB%E6%96%AF%E5%AE%9A%E7%90%86/"/>
    <id>https://yy.note/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0/%E5%B0%BC%E7%A7%91%E5%BD%BB%E6%96%AF%E5%AE%9A%E7%90%86/</id>
    <published>2020-01-25T13:14:56.000Z</published>
    <updated>2020-01-25T13:29:54.581Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<br><a href="https://www.nowcoder.com/questionTerminal/dbace3a5b3c4480e86ee3277f3fe1e85?toCommentId=732952" target="_blank" rel="noopener">原题出处</a><br>来源：牛客网</p><p>验证尼科彻斯定理，即：任何一个整数m的立方都可以写成m个连续奇数之和。</p><p>例如：</p><p>1^3=1 </p><p>2^3=3+5 </p><p>3^3=7+9+11 </p><p>4^3=13+15+17+19 </p><blockquote><p>接口说明<br>原型：<br> /*<br> 功能: 验证尼科彻斯定理，即：任何一个整数m的立方都可以写成m个连续奇数之和。<br> 原型：<br>     int GetSequeOddNum(int m,char * pcSequeOddNum);<br> 输入参数：<br>     int m：整数(取值范围：1～100)<br> 返回值：<br>     m个连续奇数(格式：“7+9+11”);<br> <em>/<br> public String GetSequeOddNum(int m)<br> {<br>     /*在这里实现功能</em>/<br>     return null;<br> }</p></blockquote><p>输入描述:</p><blockquote><p>输入一个int整数</p></blockquote><p>输出描述:</p><blockquote><p>输出分解后的string</p></blockquote><p>示例1<br>输入</p><blockquote><p>6</p></blockquote><p>输出</p><blockquote><p>31+33+35+37+39+41</p></blockquote><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>仔细观察发现，其实<br>2^3=3+5<br>3^3=7+9+11</p><p>3和5怎么来的？<br>其实就是2^2左右两个奇数<br>7,9,11是3^2  以及 3^2两边的奇数</p><p>以此类推，对于4和5也是一样的<br>只是对于偶数来说，不要自己的平方，奇数需要自己的平方，然后在加上自己数平方的左右两边的奇数，什么时候奇数够了就停止，比如3^ 3需要3个奇数，那么就是3^2 以及 3^两边的两个奇数，左边一个右边一个！<br>如果是5则需要5^2以及其左边两个和右边两个的奇数一共5个</p><p>下面是代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="comment">//发现数学规律哎虚浮</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">GetSequeOddNum</span><span class="params">(<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[m];</span><br><span class="line">        <span class="keyword">if</span>((m*m)%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; m-<span class="number">1</span>;count++)&#123;</span><br><span class="line">                result[i++]=m*m-<span class="number">2</span>*count;</span><br><span class="line">                result[i++]=m*m+<span class="number">2</span>*count;</span><br><span class="line">            &#125;</span><br><span class="line">            result[m-<span class="number">1</span>]=m*m;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; m;count++)&#123;</span><br><span class="line">                result[i++]=(m*m-<span class="number">1</span>)-<span class="number">2</span>*count;</span><br><span class="line">                result[i++]=(m*m+<span class="number">1</span>)+<span class="number">2</span>*count;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(result);</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; result.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==result.length-<span class="number">1</span>)&#123;</span><br><span class="line">                sb.append(result[i]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                sb.append(result[i]).append(<span class="string">"+"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(in.hasNext())&#123;</span><br><span class="line">            <span class="keyword">int</span> m = in.nextInt();</span><br><span class="line">            System.out.println(GetSequeOddNum(m));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;链接：&lt;br&gt;&lt;a href=&quot;https://www.nowcoder.com/questionTerminal/dbace3a5b3c4480e86ee3277f3fe1e85?toCommentId=732952&quot; target=&quot;_blank&quot; rel=&quot;noope
      
    
    </summary>
    
    
      <category term="牛客网练习" scheme="https://yy.note/categories/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="算法" scheme="https://yy.note/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>机器人走方格I</title>
    <link href="https://yy.note/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0/%E6%9C%BA%E5%99%A8%E4%BA%BA%E8%B5%B0%E6%96%B9%E6%A0%BCI/"/>
    <id>https://yy.note/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0/%E6%9C%BA%E5%99%A8%E4%BA%BA%E8%B5%B0%E6%96%B9%E6%A0%BCI/</id>
    <published>2020-01-25T13:14:09.000Z</published>
    <updated>2020-01-25T13:25:26.588Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>链接：<br><a href="https://www.nowcoder.com/questionTerminal/e8bb8e68434e42acbcdff0341f2a32c5" target="_blank" rel="noopener">原题</a><br>来源：牛客网</p><p>有一个XxY的网格，一个机器人只能走格点且只能向右或向下走，要从左上角走到右下角。请设计一个算法，计算机器人有多少种走法。<br>给定两个正整数int x,int y，请返回机器人的走法数目。保证x＋y小于等于12。</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//机器人</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">1</span>||y==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//count(x-1,y)代表向下走一步后所有的情况，count(x,y-1)代表向右走一步后的所有情况</span></span><br><span class="line">    <span class="keyword">return</span> count(x-<span class="number">1</span>,y)+count(x,y-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>机器人每走一步都有两种走法，要么走右面，要么有下面。<br>如果走右面，那么矩阵（网格）就缩小为X<em>(Y-1)<br>如果走下面，那么矩阵（网格）就缩小为(X-1)</em>Y</p><p>试想一直走下去，当矩阵只有一行或一列的时候，机器人就只有一种走法。（是不是很想递归出口呢）</p><p>矩阵的缩小是问题化简<br>递归出口是矩阵为一行或一列</p><p>那么我们就可以假设机器人的第一步分为两种情况<br>（1）向下走一步，矩阵缩小为(X-1) * Y<br>（2）向右走一步，矩阵缩小为X * (Y-1)</p><p>我们只考虑机器人的第一步，将这两种情况的走法相加起来就是机器人的所有走法，因为随着递归，矩阵最终会变为一列或一行，返走回数值1供上层计算，最终递归出来的就是走法数！</p><p><strong>如果有错误请提醒我呀</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;链接：&lt;br&gt;&lt;a href=&quot;https://www.nowcoder.com/questionTerminal/e8bb8e68434e
      
    
    </summary>
    
    
      <category term="牛客网练习" scheme="https://yy.note/categories/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="算法" scheme="https://yy.note/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>不用+号等算数运算符实现加法</title>
    <link href="https://yy.note/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0/%E4%B8%8D%E7%94%A8+%E5%8F%B7%E7%AD%89%E7%AE%97%E6%95%B0%E8%BF%90%E7%AE%97%E7%AC%A6%E5%AE%9E%E7%8E%B0%E5%8A%A0%E6%B3%95/"/>
    <id>https://yy.note/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0/%E4%B8%8D%E7%94%A8+%E5%8F%B7%E7%AD%89%E7%AE%97%E6%95%B0%E8%BF%90%E7%AE%97%E7%AC%A6%E5%AE%9E%E7%8E%B0%E5%8A%A0%E6%B3%95/</id>
    <published>2020-01-25T13:13:51.000Z</published>
    <updated>2020-01-25T13:20:36.630Z</updated>
    
    <content type="html"><![CDATA[<p>转自：<br><a href="https://www.iteye.com/blog/brokendreams-2084088" target="_blank" rel="noopener">不用加减符号实现加减法</a></p><p>今天有群友发了一个问题，要求不用加减符号(包括负号)来实现加减法。</p><h2 id="分析一下"><a href="#分析一下" class="headerlink" title="分析一下"></a>分析一下</h2><p>先看最简单的情况，假设1+1，按二进制算的话结果是10，可以看到从右往左的第一位变为0，第二位由于进位变为1。<br>        第1位的值有4种，0+0=0、1+0=1、0+1=1、1+1=0，这正好符合“异或”的情况。<br>        第2位的值来自于第一位的进位加上本身的值，进位的情况也有4种，0+0=0、1+0=0、0+1=0,1+1=1，这正好符合“与”的情况。<br>        考虑一般性，a+b就等同于a^b + (a&amp;b) &lt;&lt; 1，而这又是一个加法，可递归求解，出口就是当进位为0的时候。</p><h2 id="看个例子："><a href="#看个例子：" class="headerlink" title="看个例子："></a>看个例子：</h2><p>11+2<br>转为二进制，套用上面公式分析：<br> 1011 + 0010<br>=1001 + 0100<br>=1101 + 0000<br>=1101<br>结果转为10进制为13  </p><pre><code>可以自己在草稿纸上多看看例子观察下。所以Java代码实现如下：</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> b == <span class="number">0</span> ? a : add(a ^ b ,(a &amp; b) &lt;&lt; <span class="number">1</span>);  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>   那么减法怎么搞呢？减法也能用加法表示嘛，比如a-b就等于a+(-b)，但不能出现负号，我们知道Java中整型数值编码方式为补码，所以一个数对应的负数就这个数“取反加1”，so 代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> add(a, add(~b, <span class="number">1</span>));  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><pre><code>这是群友给的答案，有点意思，记录一下。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;转自：&lt;br&gt;&lt;a href=&quot;https://www.iteye.com/blog/brokendreams-2084088&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;不用加减符号实现加减法&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;今天有群友发了一个问题，要求不用加减
      
    
    </summary>
    
    
      <category term="牛客网练习" scheme="https://yy.note/categories/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="算法" scheme="https://yy.note/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>第一篇文章</title>
    <link href="https://yy.note/%E6%B5%8B%E8%AF%95/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <id>https://yy.note/%E6%B5%8B%E8%AF%95/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</id>
    <published>2020-01-25T04:27:25.000Z</published>
    <updated>2020-01-25T04:30:48.557Z</updated>
    
    <content type="html"><![CDATA[<p>今天满怀激动尝试自己搞一个小博客！！！大年初一希望可以成功撒！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天满怀激动尝试自己搞一个小博客！！！大年初一希望可以成功撒！&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="测试" scheme="https://yy.note/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="心情" scheme="https://yy.note/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
</feed>
