<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>笔记归宿</title>
  
  <subtitle>愿你熬得过万丈孤独，藏得下星辰大海　</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yy.note/"/>
  <updated>2020-01-25T13:24:26.854Z</updated>
  <id>http://yy.note/</id>
  
  <author>
    <name>Yang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>二叉树的镜像</title>
    <link href="http://yy.note/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%95%9C%E5%83%8F/"/>
    <id>http://yy.note/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%95%9C%E5%83%8F/</id>
    <published>2020-01-25T13:22:25.000Z</published>
    <updated>2020-01-25T13:24:26.854Z</updated>
    
    <content type="html"><![CDATA[<h2 id="【牛客】求出二叉树的镜像"><a href="#【牛客】求出二叉树的镜像" class="headerlink" title="【牛客】求出二叉树的镜像"></a>【牛客】求出二叉树的镜像</h2><p>链接：<br><a href="https://www.nowcoder.com/questionTerminal/564f4c26aa584921bc75623e48ca3011" target="_blank" rel="noopener">原题出处</a><br>来源：牛客网</p><p>其实我是看了大佬的博客：<br><a href="https://blog.csdn.net/xiaoxingxing1744/article/details/82782461" target="_blank" rel="noopener">大佬解说</a></p><p>操作给定的二叉树，将其变换为源二叉树的镜像。</p><p><img src="https://img-blog.csdnimg.cn/20191125162229432.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDE5NDYy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>有两种实现方式：<br>递归：</p><p>想象一下，加入只有三个结点，根结点，左孩子，右孩子<br>那么就交换左右孩子。</p><p>出口条件：</p><blockquote><p>节点为空或者左右孩子都为空</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//递归</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Mirror</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//这里和非递归的条件很类似，都是说了一件事，只要有一个不为空，我就要交换（空和非空也有左右对称嘛）</span></span><br><span class="line">    <span class="keyword">if</span>(root.left==<span class="keyword">null</span>&amp;&amp;root.right==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//交换</span></span><br><span class="line">    TreeNode temp = root.left;</span><br><span class="line">    root.left = root.right;</span><br><span class="line">    root.right = temp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//递归左子树</span></span><br><span class="line">    <span class="keyword">if</span>(root.left!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        Mirror(root.left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//递归右子树</span></span><br><span class="line">    <span class="keyword">if</span>(root.right!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        Mirror(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非递归：<br>递归其实就是栈的入栈出栈，我们可以利用栈的特性对结点进行操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//非递归</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Mirror</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    stack.push(root);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">        TreeNode node = stack.pop();</span><br><span class="line">        <span class="comment">//这个条件映衬了上面所说的话</span></span><br><span class="line">        <span class="keyword">if</span>(node.left!=<span class="keyword">null</span>||node.right!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            TreeNode temp = node.left;</span><br><span class="line">            node.left = node.right;</span><br><span class="line">            node.right = temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//其实递归就是栈的入栈出栈，所以代码很相似</span></span><br><span class="line">        <span class="keyword">if</span>(node.left!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            stack.push(node.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node.right!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            stack.push(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;【牛客】求出二叉树的镜像&quot;&gt;&lt;a href=&quot;#【牛客】求出二叉树的镜像&quot; class=&quot;headerlink&quot; title=&quot;【牛客】求出二叉树的镜像&quot;&gt;&lt;/a&gt;【牛客】求出二叉树的镜像&lt;/h2&gt;&lt;p&gt;链接：&lt;br&gt;&lt;a href=&quot;https://www.no
      
    
    </summary>
    
    
      <category term="牛客网练习" scheme="http://yy.note/categories/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="算法" scheme="http://yy.note/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>二叉树平衡检查</title>
    <link href="http://yy.note/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B9%B3%E8%A1%A1%E6%A3%80%E6%9F%A5/"/>
    <id>http://yy.note/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B9%B3%E8%A1%A1%E6%A3%80%E6%9F%A5/</id>
    <published>2020-01-25T13:17:16.000Z</published>
    <updated>2020-01-25T13:21:53.854Z</updated>
    
    <content type="html"><![CDATA[<p>参考：<a href="https://blog.csdn.net/canmengmeng/article/details/83506289" target="_blank" rel="noopener">学习自该大佬</a></p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>实现一个函数，检查二叉树是否平衡，平衡的定义如下，对于树中的任意一个结点，其两颗子树的高度差不超过1。</p><p>给定指向树根结点的指针TreeNode* root，请返回一个bool，代表这棵树是否平衡。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>1.求出左子树与右子树的高度差，大于1则false<br>2.如何求？<br>递归求出，如果节点为空那么则深度为0，这同时也是递归出口，若不为空则递归左子树与右子树。<br>注意：最终二叉树的高度是左右子树取高度高的加1</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public class TreeNode &#123;</span></span><br><span class="line"><span class="comment">    int val = 0;</span></span><br><span class="line"><span class="comment">    TreeNode left = null;</span></span><br><span class="line"><span class="comment">    TreeNode right = null;</span></span><br><span class="line"><span class="comment">    public TreeNode(int val) &#123;</span></span><br><span class="line"><span class="comment">        this.val = val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Balance</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBalance</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> left = getTreeHeight(root.left);</span><br><span class="line">        <span class="keyword">int</span> right = getTreeHeight(root.right);</span><br><span class="line">        <span class="keyword">return</span> Math.abs(left - right) &lt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getTreeHeight</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//这里为什么加1?，因为root为null时返回的是0，我们假设只有三个节点的完全二叉树</span></span><br><span class="line">        <span class="comment">//那是不是最后的结果就是根节点的左孩子0+0+1，根节点的右孩子0+0+1,最后1和1取大的再加1，不就是2嘛</span></span><br><span class="line">        <span class="keyword">return</span> Math.max(getTreeHeight(root.left),getTreeHeight(root.right))+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考：&lt;a href=&quot;https://blog.csdn.net/canmengmeng/article/details/83506289&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;学习自该大佬&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目&quot;&gt;&lt;a href
      
    
    </summary>
    
    
      <category term="牛客网练习" scheme="http://yy.note/categories/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="算法" scheme="http://yy.note/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>链表分割</title>
    <link href="http://yy.note/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0/%E9%93%BE%E8%A1%A8%E5%88%86%E5%89%B2/"/>
    <id>http://yy.note/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0/%E9%93%BE%E8%A1%A8%E5%88%86%E5%89%B2/</id>
    <published>2020-01-25T13:17:04.000Z</published>
    <updated>2020-01-25T13:27:35.094Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<br><a href="https://www.nowcoder.com/questionTerminal/0e27e0b064de4eacac178676ef9c9d70?mutiTagIds=639&orderByHotValue=1&questionTypes=000100&commentTags=Python" target="_blank" rel="noopener">原题出处</a><br>来源：牛客网</p><p>[编程题] 链表分割<br>热度指数：43019时间限制：3秒空间限制：32768K<br>算法知识视频讲解</p><p>编写代码，以给定值x为基准将链表分割成两部分，所有小于x的结点排在大于或等于x的结点之前</p><p>给定一个链表的头指针 ListNode* pHead，请返回重新排列后的链表的头指针。注意：分割以后保持原来的数据顺序不变。</p><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>一看到这道题我就想到了创建两个链表的想法，一个链表放小于指定x的所有节点，另一个放大于等于的，最后将两个链表合二为一不就是要求的结果吗</p><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p>（1）记住两个链表的头节点，在拼接时需要用到<br>（2）考虑空异常</p><p><strong><em>未实现的思路：</em></strong><br>既然可以这样弄两个链表，那么为什么不这样（创建一个链表就可以）呢？</p><p>将小于x的节点头插到该链表，大于等于的尾插到该链表，最后形成的链表不就是答案吗。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>我实现的是两个链表的（可以优化的地方：将尾插算法抽取出来为一个方法）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">partition</span><span class="params">(ListNode pHead, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">     <span class="comment">// write code here</span></span><br><span class="line">     ListNode left = <span class="keyword">null</span>;</span><br><span class="line">     ListNode right = <span class="keyword">null</span>;</span><br><span class="line">     ListNode p1 = <span class="keyword">null</span>;</span><br><span class="line">     ListNode p2 = <span class="keyword">null</span>;</span><br><span class="line">     <span class="keyword">while</span>(pHead!=<span class="keyword">null</span>)&#123;</span><br><span class="line">         <span class="keyword">if</span>(pHead.val&lt;x)&#123;</span><br><span class="line">             <span class="keyword">if</span>(left == <span class="keyword">null</span>)&#123;</span><br><span class="line">                 left = <span class="keyword">new</span> ListNode(pHead.val);</span><br><span class="line">                 p1 = left; <span class="comment">//左链表的头节点</span></span><br><span class="line">             &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                 left.next = <span class="keyword">new</span> ListNode(pHead.val);</span><br><span class="line">                 left = left.next;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">             <span class="keyword">if</span>(right == <span class="keyword">null</span>)&#123;</span><br><span class="line">                 right = <span class="keyword">new</span> ListNode(pHead.val);</span><br><span class="line">                 p2 = right;    <span class="comment">//右链表的头节点</span></span><br><span class="line">             &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                 right.next = <span class="keyword">new</span> ListNode(pHead.val);</span><br><span class="line">                 right = right.next;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         pHead = pHead.next;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span>(p1==<span class="keyword">null</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> p2;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>(p2==<span class="keyword">null</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> p1;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//走到这里说明都不为空，需要连接</span></span><br><span class="line">     <span class="comment">//找到左链表的最后一个节点将其与右链表连接</span></span><br><span class="line">     ListNode cur = p1;</span><br><span class="line">     <span class="keyword">while</span>(cur.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">         cur = cur.next;</span><br><span class="line">     &#125;</span><br><span class="line">     cur.next = p2;</span><br><span class="line">     <span class="keyword">return</span> p1;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>如果有错误还望指出！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;链接：&lt;br&gt;&lt;a href=&quot;https://www.nowcoder.com/questionTerminal/0e27e0b064de4eacac178676ef9c9d70?mutiTagIds=639&amp;orderByHotValue=1&amp;questionTypes
      
    
    </summary>
    
    
      <category term="牛客网练习" scheme="http://yy.note/categories/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="算法" scheme="http://yy.note/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>统计同成绩人数</title>
    <link href="http://yy.note/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0/%E7%BB%9F%E8%AE%A1%E5%90%8C%E6%88%90%E7%BB%A9%E4%BA%BA%E6%95%B0/"/>
    <id>http://yy.note/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0/%E7%BB%9F%E8%AE%A1%E5%90%8C%E6%88%90%E7%BB%A9%E4%BA%BA%E6%95%B0/</id>
    <published>2020-01-25T13:15:21.000Z</published>
    <updated>2020-01-25T13:31:07.374Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<br><a href="https://www.nowcoder.com/questionTerminal/987123efea5f43709f31ad79a318ca69" target="_blank" rel="noopener">原题出处</a><br>来源：牛客网</p><p>读入N名学生的成绩，将获得某一给定分数的学生人数输出。</p><p>输入描述:<br>测试输入包含若干测试用例，每个测试用例的格式为</p><blockquote><p>第1行：N<br>第2行：N名学生的成绩，相邻两数字用一个空格间隔。<br>第3行：给定分数</p></blockquote><p>当读到N=0时输入结束。其中N不超过1000，成绩分数为（包含）0到100之间的一个整数。</p><p>输出描述:<br>对每个测试用例，将获得给定分数的学生人数输出。<br>示例1<br>输入</p><blockquote><p>3<br>80 60 90<br>60<br>2<br>85 66<br>0<br>5<br>60 75 90 55 75<br>75<br>0</p></blockquote><p>输出</p><blockquote><p>1<br>0<br>2</p></blockquote><p>一开始，我写了一个封装类来封装信息，并将该类添加到集合中。这样才可以保证输出0结束后记住输入的所有数据。<br>在idea上复制输入示例代码测试，输出的数据与输出示例一样但是通不过测试，后来查了一下网络上的，他们是按一组一组数据处理的不是将所有数据输入后在统一处理，但是这样将输入示例在idea上测试与输出示例不符但又可以通过。百思不得其解，无情！<br>这里先附上可以通过的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> N=in.nextInt();</span><br><span class="line">        <span class="keyword">if</span>(N==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        in.nextLine();  <span class="comment">//吃个空格,nextLine()和next()以及nextInt()一起用一定要格外注意空格回车</span></span><br><span class="line">        String scores = in.nextLine();</span><br><span class="line">        <span class="keyword">int</span> score = in.nextInt();</span><br><span class="line"></span><br><span class="line">        String[] s=scores.split(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">for</span>(String t:s)&#123;</span><br><span class="line">            <span class="keyword">int</span> i = Integer.parseInt(t);</span><br><span class="line">            <span class="keyword">if</span>(i==score)&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面的是封装的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Day16</span></span>&#123;</span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> N,String scores,<span class="keyword">int</span> theScore)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        String[] s = scores.split(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> score = Integer.parseInt(s[i]);</span><br><span class="line">            <span class="keyword">if</span>(theScore==score)&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N;</span><br><span class="line">        String scores;</span><br><span class="line">        <span class="keyword">int</span> theScore;</span><br><span class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">(<span class="keyword">int</span> N,String scores,<span class="keyword">int</span> theScore)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.N=N;</span><br><span class="line">            <span class="keyword">this</span>.scores = scores;</span><br><span class="line">            <span class="keyword">this</span>.theScore = theScore;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCount</span><span class="params">(<span class="keyword">int</span> count)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.count = count;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        List&lt;Test&gt; list = <span class="keyword">new</span> ArrayList&lt;Test&gt;();</span><br><span class="line">        <span class="keyword">int</span> N=in.nextInt();</span><br><span class="line">        in.nextLine();  <span class="comment">//吃空格</span></span><br><span class="line">        <span class="keyword">while</span>(N!=<span class="number">0</span>)&#123;</span><br><span class="line">            String scores=in.nextLine();<span class="comment">/*</span></span><br><span class="line"><span class="comment">            System.out.println(scores);*/</span></span><br><span class="line">            <span class="keyword">int</span> theScore = in.nextInt();</span><br><span class="line">            list.add(<span class="keyword">new</span> Test(N,scores,theScore));</span><br><span class="line">            N = in.nextInt();</span><br><span class="line">            in.nextLine();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; list.size();i++)&#123;</span><br><span class="line">            Test test = list.get(i);</span><br><span class="line">            <span class="keyword">int</span> count = fun(test.N,test.scores,test.theScore);</span><br><span class="line">            test.setCount(count);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;list.size();i++)&#123;</span><br><span class="line">            System.out.println(list.get(i).count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如有错误还望指出哈！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;链接：&lt;br&gt;&lt;a href=&quot;https://www.nowcoder.com/questionTerminal/987123efea5f43709f31ad79a318ca69&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原题出处&lt;/a&gt;&lt;br&gt;来源
      
    
    </summary>
    
    
      <category term="牛客网练习" scheme="http://yy.note/categories/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="算法" scheme="http://yy.note/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>尼科彻斯定理</title>
    <link href="http://yy.note/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0/%E5%B0%BC%E7%A7%91%E5%BD%BB%E6%96%AF%E5%AE%9A%E7%90%86/"/>
    <id>http://yy.note/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0/%E5%B0%BC%E7%A7%91%E5%BD%BB%E6%96%AF%E5%AE%9A%E7%90%86/</id>
    <published>2020-01-25T13:14:56.000Z</published>
    <updated>2020-01-25T13:29:54.581Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<br><a href="https://www.nowcoder.com/questionTerminal/dbace3a5b3c4480e86ee3277f3fe1e85?toCommentId=732952" target="_blank" rel="noopener">原题出处</a><br>来源：牛客网</p><p>验证尼科彻斯定理，即：任何一个整数m的立方都可以写成m个连续奇数之和。</p><p>例如：</p><p>1^3=1 </p><p>2^3=3+5 </p><p>3^3=7+9+11 </p><p>4^3=13+15+17+19 </p><blockquote><p>接口说明<br>原型：<br> /*<br> 功能: 验证尼科彻斯定理，即：任何一个整数m的立方都可以写成m个连续奇数之和。<br> 原型：<br>     int GetSequeOddNum(int m,char * pcSequeOddNum);<br> 输入参数：<br>     int m：整数(取值范围：1～100)<br> 返回值：<br>     m个连续奇数(格式：“7+9+11”);<br> <em>/<br> public String GetSequeOddNum(int m)<br> {<br>     /*在这里实现功能</em>/<br>     return null;<br> }</p></blockquote><p>输入描述:</p><blockquote><p>输入一个int整数</p></blockquote><p>输出描述:</p><blockquote><p>输出分解后的string</p></blockquote><p>示例1<br>输入</p><blockquote><p>6</p></blockquote><p>输出</p><blockquote><p>31+33+35+37+39+41</p></blockquote><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>仔细观察发现，其实<br>2^3=3+5<br>3^3=7+9+11</p><p>3和5怎么来的？<br>其实就是2^2左右两个奇数<br>7,9,11是3^2  以及 3^2两边的奇数</p><p>以此类推，对于4和5也是一样的<br>只是对于偶数来说，不要自己的平方，奇数需要自己的平方，然后在加上自己数平方的左右两边的奇数，什么时候奇数够了就停止，比如3^ 3需要3个奇数，那么就是3^2 以及 3^两边的两个奇数，左边一个右边一个！<br>如果是5则需要5^2以及其左边两个和右边两个的奇数一共5个</p><p>下面是代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="comment">//发现数学规律哎虚浮</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">GetSequeOddNum</span><span class="params">(<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[m];</span><br><span class="line">        <span class="keyword">if</span>((m*m)%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; m-<span class="number">1</span>;count++)&#123;</span><br><span class="line">                result[i++]=m*m-<span class="number">2</span>*count;</span><br><span class="line">                result[i++]=m*m+<span class="number">2</span>*count;</span><br><span class="line">            &#125;</span><br><span class="line">            result[m-<span class="number">1</span>]=m*m;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; m;count++)&#123;</span><br><span class="line">                result[i++]=(m*m-<span class="number">1</span>)-<span class="number">2</span>*count;</span><br><span class="line">                result[i++]=(m*m+<span class="number">1</span>)+<span class="number">2</span>*count;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(result);</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; result.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==result.length-<span class="number">1</span>)&#123;</span><br><span class="line">                sb.append(result[i]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                sb.append(result[i]).append(<span class="string">"+"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(in.hasNext())&#123;</span><br><span class="line">            <span class="keyword">int</span> m = in.nextInt();</span><br><span class="line">            System.out.println(GetSequeOddNum(m));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;链接：&lt;br&gt;&lt;a href=&quot;https://www.nowcoder.com/questionTerminal/dbace3a5b3c4480e86ee3277f3fe1e85?toCommentId=732952&quot; target=&quot;_blank&quot; rel=&quot;noope
      
    
    </summary>
    
    
      <category term="牛客网练习" scheme="http://yy.note/categories/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="算法" scheme="http://yy.note/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>机器人走方格I</title>
    <link href="http://yy.note/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0/%E6%9C%BA%E5%99%A8%E4%BA%BA%E8%B5%B0%E6%96%B9%E6%A0%BCI/"/>
    <id>http://yy.note/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0/%E6%9C%BA%E5%99%A8%E4%BA%BA%E8%B5%B0%E6%96%B9%E6%A0%BCI/</id>
    <published>2020-01-25T13:14:09.000Z</published>
    <updated>2020-01-25T13:25:26.588Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>链接：<br><a href="https://www.nowcoder.com/questionTerminal/e8bb8e68434e42acbcdff0341f2a32c5" target="_blank" rel="noopener">原题</a><br>来源：牛客网</p><p>有一个XxY的网格，一个机器人只能走格点且只能向右或向下走，要从左上角走到右下角。请设计一个算法，计算机器人有多少种走法。<br>给定两个正整数int x,int y，请返回机器人的走法数目。保证x＋y小于等于12。</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//机器人</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">1</span>||y==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//count(x-1,y)代表向下走一步后所有的情况，count(x,y-1)代表向右走一步后的所有情况</span></span><br><span class="line">    <span class="keyword">return</span> count(x-<span class="number">1</span>,y)+count(x,y-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>机器人每走一步都有两种走法，要么走右面，要么有下面。<br>如果走右面，那么矩阵（网格）就缩小为X<em>(Y-1)<br>如果走下面，那么矩阵（网格）就缩小为(X-1)</em>Y</p><p>试想一直走下去，当矩阵只有一行或一列的时候，机器人就只有一种走法。（是不是很想递归出口呢）</p><p>矩阵的缩小是问题化简<br>递归出口是矩阵为一行或一列</p><p>那么我们就可以假设机器人的第一步分为两种情况<br>（1）向下走一步，矩阵缩小为(X-1) * Y<br>（2）向右走一步，矩阵缩小为X * (Y-1)</p><p>我们只考虑机器人的第一步，将这两种情况的走法相加起来就是机器人的所有走法，因为随着递归，矩阵最终会变为一列或一行，返走回数值1供上层计算，最终递归出来的就是走法数！</p><p><strong>如果有错误请提醒我呀</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;链接：&lt;br&gt;&lt;a href=&quot;https://www.nowcoder.com/questionTerminal/e8bb8e68434e
      
    
    </summary>
    
    
      <category term="牛客网练习" scheme="http://yy.note/categories/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="算法" scheme="http://yy.note/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>不用+号等算数运算符实现加法</title>
    <link href="http://yy.note/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0/%E4%B8%8D%E7%94%A8+%E5%8F%B7%E7%AD%89%E7%AE%97%E6%95%B0%E8%BF%90%E7%AE%97%E7%AC%A6%E5%AE%9E%E7%8E%B0%E5%8A%A0%E6%B3%95/"/>
    <id>http://yy.note/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0/%E4%B8%8D%E7%94%A8+%E5%8F%B7%E7%AD%89%E7%AE%97%E6%95%B0%E8%BF%90%E7%AE%97%E7%AC%A6%E5%AE%9E%E7%8E%B0%E5%8A%A0%E6%B3%95/</id>
    <published>2020-01-25T13:13:51.000Z</published>
    <updated>2020-01-25T13:20:36.630Z</updated>
    
    <content type="html"><![CDATA[<p>转自：<br><a href="https://www.iteye.com/blog/brokendreams-2084088" target="_blank" rel="noopener">不用加减符号实现加减法</a></p><p>今天有群友发了一个问题，要求不用加减符号(包括负号)来实现加减法。</p><h2 id="分析一下"><a href="#分析一下" class="headerlink" title="分析一下"></a>分析一下</h2><p>先看最简单的情况，假设1+1，按二进制算的话结果是10，可以看到从右往左的第一位变为0，第二位由于进位变为1。<br>        第1位的值有4种，0+0=0、1+0=1、0+1=1、1+1=0，这正好符合“异或”的情况。<br>        第2位的值来自于第一位的进位加上本身的值，进位的情况也有4种，0+0=0、1+0=0、0+1=0,1+1=1，这正好符合“与”的情况。<br>        考虑一般性，a+b就等同于a^b + (a&amp;b) &lt;&lt; 1，而这又是一个加法，可递归求解，出口就是当进位为0的时候。</p><h2 id="看个例子："><a href="#看个例子：" class="headerlink" title="看个例子："></a>看个例子：</h2><p>11+2<br>转为二进制，套用上面公式分析：<br> 1011 + 0010<br>=1001 + 0100<br>=1101 + 0000<br>=1101<br>结果转为10进制为13  </p><pre><code>可以自己在草稿纸上多看看例子观察下。所以Java代码实现如下：</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> b == <span class="number">0</span> ? a : add(a ^ b ,(a &amp; b) &lt;&lt; <span class="number">1</span>);  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>   那么减法怎么搞呢？减法也能用加法表示嘛，比如a-b就等于a+(-b)，但不能出现负号，我们知道Java中整型数值编码方式为补码，所以一个数对应的负数就这个数“取反加1”，so 代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> add(a, add(~b, <span class="number">1</span>));  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><pre><code>这是群友给的答案，有点意思，记录一下。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;转自：&lt;br&gt;&lt;a href=&quot;https://www.iteye.com/blog/brokendreams-2084088&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;不用加减符号实现加减法&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;今天有群友发了一个问题，要求不用加减
      
    
    </summary>
    
    
      <category term="牛客网练习" scheme="http://yy.note/categories/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="算法" scheme="http://yy.note/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>第一篇文章</title>
    <link href="http://yy.note/%E6%B5%8B%E8%AF%95/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <id>http://yy.note/%E6%B5%8B%E8%AF%95/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</id>
    <published>2020-01-25T04:27:25.000Z</published>
    <updated>2020-01-25T04:30:48.557Z</updated>
    
    <content type="html"><![CDATA[<p>今天满怀激动尝试自己搞一个小博客！！！大年初一希望可以成功撒！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天满怀激动尝试自己搞一个小博客！！！大年初一希望可以成功撒！&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="测试" scheme="http://yy.note/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="心情" scheme="http://yy.note/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
</feed>
